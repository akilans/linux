server {
        # redirect http requests to https
	listen 80 default_server;
        server_name inba.com www.inba.com;
        return 301 https://inba.com$request_uri;
}

upstream node_app_3000 {
        server 127.0.0.1:3000;
}

upstream load_balancer {
        # ip_hash - for sticky session
        # round_robin - for share load - Default method
        # least_conn - upstream server fewer connection prefered
	server 127.0.0.1:5000 weight=2; # it gets 200%
        server 127.0.0.1:3000;
}


server {
        # ssl config
	listen 443 ssl default_server;
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
	server_name inba.com www.inba.com;
	index index.html index.htm index.php;

        # Files location to serve
	root /var/www/inba.com;
        
        # Access and error log location
        access_log /var/log/nginx/inba.com.access.log;
        error_log /var/log/nginx/inba.com.error.log;

	location / {
		try_files $uri $uri/ =404;
	}

        location /loadbalancer {
		proxy_pass http://load_balancer/;
        }

        location /proxy {
		proxy_pass http://node_app_3000/;
        }
	
	# URL specific access and error log location
	location /images {
                access_log /var/log/nginx/inba.com.images.access.log;
                error_log /var/log/nginx/inba.com.images.error.log;
		autoindex on;
	}
        
	# basic auth config for url specific
        # install apache2-utils and generate user and password using htpasswd cli
	# Allow specific IP range
        location /appointments {
                auth_basic "This page needs authentication";
                auth_basic_user_file /etc/nginx/passwords;
                allow 192.168.33.1;
                allow 192.168.33.10;
		deny all;
        }

        # Simple 403 forbidden page just to verify
        location /deny {
        	deny all;
   	 }
        
	# php specific config
    	location ~ \.php$ {
        	include snippets/fastcgi-php.conf;
        	fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
        	fastcgi_intercept_errors on;
    	}

	# overwrite default 404 page
        error_page 404 /404.html;
        location = /404.html {
		internal;
        }

	# overwrite default server error page
        error_page 500 501 502 503 504 /50x.html;
        location = /50x.html {
		internal;
        }

	# overwrite default 403 forbidden page
        error_page 403 /403.html;
        location = /403.html {
              internal;
        }

	# simple 500 page just to verify
        location = /500 {
		fastcgi_pass unix:/this/will/fail;
        }
}  
